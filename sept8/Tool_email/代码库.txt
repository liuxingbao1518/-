driver = webdriver.Chrome()
driver.maximize_window()
# 全局等待
driver.implicitly_wait(10)
driver.get(r'C:\Program Files (x86)\Sublime Text3\test_4.html')
 

#需要先导入
from selenium.webdriver.support.ui import  WebDriverWait
   
from selenium.webdriver.support import expected_conditions as ES
    
from  selenium.webdriver.common.by import By

# 判断我的text值里面有没有我包含的文本
    # driver是浏览器驱动 0.5是每个0.5秒去访问1次，10是代表最多不超过10秒
    # until是等到标签中的某个元素文本出现为止
result=WebDriverWait(driver,0.5,10).until(ES.text_to_be_present_in_element((By.ID,'button_id_2'),'提交多一次'))
print('result is',result)


鼠标事件：

悬停：
悬停需要导入第三方库
    from selenium.webdriver.common.action_chains import ActionChains
    # 悬停定位
    ele=driver.find_element_by_name('tj_briicon')
    ActionChains(driver).move_to_element(ele).perform()#注意driver和ele
    # 定位悬停里面的元素
    driver.find_element_by_name('tj_mp3').click()

鼠标拖动:
#起始位置
start=driver.find_element_by_id('dragger')
# 目的地地址
end1=driver.find_element_by_xpath('/html/body/div[2]')
#执行
ActionChains(driver).drag_and_drop(start,end1).perform()
time.sleep(5)
driver.close()

键盘事件：
     导入库:
     from selenium.webdriver.common.keys import Keys
     driver.find_element_by_id('kw').send_keys('中国国防部')
     time.sleep(3)
     driver.find_element_by_id('kw').send_keys(Keys.BACK_SPACE)
     driver.find_element_by_id('kw').send_keys(Keys.CONTROL,'a')
     time.sleep(1)
     driver.find_element_by_id('kw').send_keys(Keys.CONTROL,'c')
     driver.find_element_by_id('kw').send_keys(Keys.F5)

注意事项：古关键字Keys后全部大写  在复制粘贴时小写和括号
send_keys(Keys.CONTROL,'a')  
send_keys(CONTROL,'c')  
send_keys(CONTROL,'x') 
send_keys(CONTROL,'v')
Keys.SPACE空格键  TAB制表键  ESCAPE回退键  ENTER回车键   BACK_SPACE删除键

警告框处理：关键字  switch_to.alert
     点击警告框
     	driver.find_element_by_name('b1').click()
     获取警告框出现的信息
    	a=driver.switch_to.alert.text
   	print(a)
    在警告框中输入值
    	driver.switch_to.alert.send_keys('fddvgdfvfdv')
    	time.sleep(3)
     新的方法警告框确认
    	driver.switch_to.alert.accept()
     新的方法警告框取消
    	driver.switch_to.alert.dismiss()

表单&窗口切换:
当前窗口
result=driver.current_window_handle
print('当前窗口是',result)

获取所有窗口
driver.window_handles



表单切换，截图，格式化字符串
表单切换:driver.switch_to_frame(iframe的ID)
    # 返回上级表单：driver.switch_to_default_content()
    # 1.定位百度
    a=driver.find_element_by_id('if')
    # 切换到百度表单
    driver.switch_to.frame(a)
    driver.find_element_by_id('kw').click()
    driver.find_element_by_id('kw').send_keys('叙利亚')
    time.sleep(3)
    # 返回原来页面中
    driver.switch_to.default_content()
    driver.find_element_by_id('uid').click()
    driver.find_element_by_id('uid').send_keys('流星雨')
    # 截图 get_screenshot_as_file()
    # 格式化字符串('img{}.png'.format(传参))
    now = int(time.time())
    driver.get_screenshot_as_file('img{}.png'.format(now))


格式化字符串
intvar = 100
list=[13,56,234,5,78]
tupe=('dfdf','dgs','adf',344)
dict={'name':'tom','age':23}
str='fbgf'
print('{}:{}:{}:{}:{}'.format(intvar,list,tupe,dict,str))

print('{0}:{0}:{1}:{3[name]}:{4}'.format(intvar,list,tupe,dict,str))
注意0表示打印100，1表示打印列表 {3[name]}b表示打印字典中的name值


6.14号
下拉框：
# 导入下拉框
from selenium.webdriver.support.ui import Select
a = driver.find_element_by_id('ShippingMethod')
# 方法一，使用value定位
# Select(a).select_by_value('9.03')
# 方法二，使用索引定位
# Select(a).select_by_index(4)
# 方法三，使用Text值定位(值必须要完整)
# Select(a).select_by_visible_text('USPS Priority Mail ==> $7.45')

高级函数：
a=[32,344,57,457,9,345]

def funcA(a):
    b=[]
    for i in range(len(a)):
        if a[i]>57:
            b.append(a[i])
    return b

result=funcA(a)
print(result)

# 过滤函数filter  lambda匿名函数
print(list(filter(lambda x:x>57,a)))


# def funcB(a):
#     n = 1
#     for i in range(len(a)):
#         n *=a[i]
#     return n
#
# result = funcB(a)
# print(result)

# 递归函数filter
from functools import reduce
print(reduce(lambda x,y:x*y,a))


l=[]
for i in range(1,21):
    l.append(i)
print(l)
# 列表推导式(注意中括号)
l1=[i for i in range(1,21)]
print(l1)

# 生成器
l2=(i for i in range(1,21))
print(l2)
print(l2.__next__())
print(l2.__next__())
print(l2.__next__())

a = 3
if a > 2:
    print(True)
else:
    print(False)

# 三元表达式
l2=True if a>2 else False














# 上传照片
# 导入os模块
# import os
# 定位上传图片
# driver.find_element_by_name('file').click()
# time.sleep(3)
# 安装autoit_3-setup.exe(上传图片用，注意版本)
# 将uploadFile.au3生成uploadFile.exe(执行windows执行器  版本为64位)
#设置文件路径 ControlSetText("打开", "", "Edit1", "C:\Users\Administrator\Desktop\liuxingbao\image\img1.png")
# 将uploadFile.au3里面的路径修改成需要上传图片所在位置的路径
# os.system('C:/Users/Administrator/Desktop/liuxingbao/自动化安装文件/uploadFile.exe')


项目：
1.安装项目(解压安装)
2.在D:\phpStudy_edu\phpStudy\WWW\application\user_config.php打开
 define('W_BASE_URL_PATH','http://localhost/');	修改为本地	

在phpstudy中将MySQL和Apache启动(注意如果没有启动则将其他选项菜单
》phpstudy设置》端口常规设置》网站目录(修改成相应的目录))》
D:/phpStudy_edu/phpStudy/WWW
3.在浏览器中打开

自动化测试理论：
运维，代码库，测试一键完成
driver 不同浏览器中


线性脚本：从上往下执行
po思想：代码和业务分层  尽量分3层

业务分层
函数变成类
 

练习：

函数的返回
init传参要在实例化中传参
变量  方法  魔法
po思想

对象层:把全部元素抽取出来(定位元素)（类变量）

操作层:

业务层:把全部操作层拼接出来

分层的好处：前段修改代码后，只需修改对象层的东西，业务逻辑修改后只需修改业务层不需修改其他




from selenium import webdriver
edu_url = 'http://localhost/admin.php'
class Page(object):

    # 生成浏览器驱动
    # def __init__(self):
    #     self.driver= webdriver.Chrome()
    def create_driver(self):
        driver = webdriver.Chrome()
        return driver
    # 打开浏览器
    def open_url(self,driver,url=edu_url):
        driver.maximize_window()
        # 全局等待
        driver.implicitly_wait(10)
        # 获取本地文件
        driver.get(url)

    # 关闭浏览器
    def close_url(self,driver):
       driver.close()

from time import sleep
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as ES

class Common_login_L(object):

    # 对象层
    ipt_username=(By.ID,'username')
    ipt_password=(By.ID,'password')
    click_button_login=(By.XPATH,'//*[@id="loginFrm"]/input')
    # 操作层
    # 登录
    def ipt_username002(self,driver,username):
        driver.find_element(*self.ipt_username).send_keys(username)

    def ipt_password002(self,driver,password):
        driver.find_element(*self.ipt_password).send_keys(password)

    def click_button_login002(self,driver):
        driver.find_element(*self.click_button_login).click()
    # 业务层
    def login_system(self,driver,username,password):
        self.ipt_username002(driver,username)
        self.ipt_password002(driver,password)
        self.click_button_login002(driver)
    # def verify_login_succecc(self,driver):
    #     pass
# if __name__ == '__main__':
#     run=Common_login_L()
#     run.login_system('admin','admin')


from po.Common_open_url import Page
from selenium.webdriver.common.by import By


class Click_number_center(object):
    # 对象层
    click_on_number_center=(By.XPATH,'//*[@id="header"]/ul/li[3]/a')
    # 操作层
    def create_run_center(self,driver):
        # 点击会员中心
        driver.find_element(*self.click_on_number_center).click()
    # 业务层
    def click_on_the_Membership_Center(self,driver):
        self.click_on_number_center(driver)
if __name__ == '__main__':
    pass


import time
import os
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
# from po.Common_open_url import Page

# 添加学生类
class AddStudentPage(object):

    # 对象层(定位元素)
    # 点击学生列表
    click_student_list001=(By.LINK_TEXT,'学生列表')
    # 切换进入表单
    change_frame=(By.ID,'mainframe')
    # 点击添加学生
    click_add_student001=(By.XPATH,'/html/body/div[2]/h3/a[2]/span')
    # 进入页面操作,输入用户账号
    user_name=(By.ID,'username')
    # 输入称呼
    chenghu=(By.NAME,'realname')
    # 输入密码
    user_psw=(By.NAME,'password')
    # 选择性别
    click_sex=(By.XPATH,'//*[@id="form"]/div/div[4]/div/label[3]')
    # 选择角色
    select_jiaose=(By.NAME,'roleid')
    # 选择明星学员
    click_Star_Student=(By.NAME,'isstart')
    # 点击上传图片
    sctp=(By.XPATH,'//*[@id="form"]/div/div[7]/div/a/span')
    # 选择本地图片
    benditupain=(By.XPATH,'/html/body/div[3]/div[1]/div[2]/div/div[1]/ul/li[2]')
    # 预览
    preview=(By.XPATH,'/html/body/div[3]/div[1]/div[2]/div/div[3]/form/div/div')
    # 点击确定
    Click_OK=(By.XPATH,'/html/body/div[3]/div[1]/div[3]/span[1]/input')
    # 学员类型
    Types_of_trainees=(By.ID,'startname')
    # driver.find_element_by_id('startname').send_keys('华为')
    # 学习时间
    learning_time=(By.ID,'studytime')
    # 报名课程数
    Enrollment_Course=(By.NAME,'studynum')
    # 选择机构
    Selection_mechanism = (By.ID, 'oneCategory')
    # 选择邮箱
    Selection_email=(By.ID,'email')
    # 选择手机
    Selection_Phone=(By.ID,'phone')
    # 省份
    province=(By.NAME,'location_p')
    # 市
    city=(By.NAME,'location_c')
    # 区
    area=(By.NAME,'location_a')
    # 输入详细地址
    Address=(By.ID,'address')
    # 个人简历
    Curriculum_vitae=(By.ID,'introduce')
    # 保存
    save=(By.ID,'btn_sub')
    # 验证是否成功(定位坐标)
    verify_success=(By.XPATH,'/html/body/div[2]/h3/a/span')
    # 返回值
    return_value=(By.XPATH,'//*[@id="recordList"]/tr[1]/td[6]')

    # 操作层(对元素进行操作)
    # 点击学生列表
    def  click_student_list002(self,driver):
        driver.find_element(*self.click_student_list001).click()
    # 切换进入表单
    def change_frame002(self,driver):
        a=driver.find_element(*self.change_frame)
        driver.switch_to.frame(a)
    # 点击添加学生
    def click_add_student002(self,driver):
        driver.find_element(*self.click_add_student001).click()
    # 进入页面操作,输入用户账号
    def user_name002(self,driver,value):
        driver.find_element(*self.user_name).send_keys(value)
    # 输入称呼
    def chenghu002(self,driver,value):
        driver.find_element(*self.chenghu).send_keys(value)
    # 输入密码
    def password002(self,driver,value):
        driver.find_element(*self.user_psw).send_keys(value)
    # 选择性别
    def click_sex002(self,driver):
        driver.find_element(*self.click_sex).click()
    # 选择角色
    def click_jiaose002(self,driver):
        a=driver.find_element(*self.select_jiaose)
        Select(a).select_by_value('8')
    # 选择明星学员
    def click_Star_Student002(self,driver):
        driver.find_element(*self.click_Star_Student).click()
    # 点击上传图片
    def sctp002(self,driver):
        driver.find_element(*self.sctp).click()
    # 选择本地图片
    def benditupian002(self,driver):
        driver.find_element(*self.benditupain).click()
    # 预览
    def preview002(self,driver):
        driver.find_element(*self.preview).click()
        time.sleep(2)
        os.system('C:/Users/Administrator/Desktop/liuxingbao/自动化安装包文件/uploadFile.exe')
        time.sleep(3)
    # 点击确定
    def click_ok002(self,driver):
        driver.find_element(*self.Click_OK).click()
    # 学员类型
    def types_of_trainees002(self,driver,value):
        driver.find_element(*self.Types_of_trainees).send_keys(value)
    # 学习时间
    def learning_time002(self,driver,value):
        driver.find_element(*self.learning_time).send_keys(value)
    # 报名课程数
    def enrollment_Course002(self,driver,value):
        driver.find_element(*self.Enrollment_Course).send_keys(value)
    # 选择机构
    def selection_mechanism002(self,driver):
        a=driver.find_element(*self.Selection_mechanism)
        Select(a).select_by_visible_text('北京科技大学')
    # 选择邮箱
    def selection_email002(self,driver,value):
        driver.find_element(*self.Selection_email).send_keys(value)
    # 选择手机
    def selection_phone002(self,driver,value):
        driver.find_element(*self.Selection_Phone).send_keys(value)
    # 选择省份
    def province002(self,driver):
        a=driver.find_element(*self.province)
        Select(a).select_by_value('四川省')
    # 选择市
    def city002(self,driver):
        b=driver.find_element(*self.city)
        Select(b).select_by_visible_text('达州市')
    # 选择区
    def area002(self,driver):
        c=driver.find_element(*self.area)
        Select(c).select_by_index('1')
    # 输入详细地址
    def address002(self,driver,value):
        driver.find_element(*self.Address).send_keys(value)
    #个人简历
    def curriculum_vitae002(self,driver,value):
        driver.find_element(*self.Curriculum_vitae).send_keys(value)
    def save002(self,driver):
        driver.find_element(*self.save).click()
        time.sleep(3)
        driver.switch_to.alert.accept()
        driver.find_element(*self.return_value).click()
    # 验证是否成功(定位坐标)
    def verify_success002(self,driver):
        driver.find_element(*self.verify_success).click()
        # resutl = driver.find_element(*self.return_value).text
        # return resutl
    # # 返回值
    def return_value002(self,driver):
        resutl=driver.find_element(*self.return_value).text
        return resutl

    # 业务层(对操作层进行拼接)
    def add_student(self,driver,username,realname,password,startname,studytime,studynum,email,phone,address,introduce):
        self.click_student_list002(driver)
        self.change_frame002(driver)
        self.click_add_student002(driver)
        self.user_name002(driver,username)
        self.chenghu002(driver,realname)
        self.password002(driver,password)
        self.click_sex002(driver)
        self.click_jiaose002(driver)
        self.click_Star_Student002(driver)
        self.sctp002(driver)
        self.benditupian002(driver)
        self.preview002(driver)
        self.click_ok002(driver)
        self.types_of_trainees002(driver,startname)
        self.learning_time002(driver,studytime)
        self.enrollment_Course002(driver,studynum)
        self.selection_mechanism002(driver)
        self.selection_email002(driver,email)
        self.selection_phone002(driver,phone)
        self.province002(driver)
        self.city002(driver)
        self.area002(driver)
        self.address002(driver,address)
        self.curriculum_vitae002(driver,introduce)
        self.save002(driver)
        self.verify_success002(driver)
        self.return_value002(driver)
if __name__ == '__main__':
    pass

import time
import unittest
from selenium import webdriver
from po.Common_open_url import Page
from po.Common_login import Common_login_L
from po.huiyuanzhongxing.click_number_center import Click_number_center
from po.huiyuanzhongxing.student_list.add_student_list import AddStudentPage

# 测试类
class TestEdu(unittest.TestCase):
    def setUp(self):
        # 实例化driver
        self.obj = Page()
        # 启动浏览器的类方法
        self.driver = self.obj.create_driver()
        self.driver.implicitly_wait(10)
        # 实例化登录
        self.dl = Common_login_L()
        # 实例化会员中心
        self.hy = Click_number_center()
        # 实例化添加学生
        self.xs = AddStudentPage()

    def tearDown(self):
        self.obj.close_url(self.driver)
    # 测试步骤
    def add_student_lc(self):
        # 打开浏览器
        self.obj.open_url(self.driver)
        # 登录
        self.dl.login_system(self.driver,'admin','admin')
        # 点击会员中心
        self.hy.create_run_center(self.driver)
        # 添加学生
        self.xs.add_student(self.driver,'15013444227','刘星雨','liu12345','优秀学生','2019-6-18','汉语',
                            '15013444227@163.com', '15013444227','四川省达州市北外悦城怡景','高才生')

        # 校验学生
        result = self.xs.return_value002(self.driver)
        return result

    def test_add_student_success(self):
        result = self.add_student_lc()
        self.assertAlmostEqual(result, '15013444227')

if __name__ == '__main__':
    unittest.main()

第一步：线性脚本
第二不：模块化驱动（需要导入线性脚本）
		  》创建driver，登录，添加用例，验证是否成功(在函数中加driver)
		  》创建测试类->定义函数(用例流程)#将文件中创建的driver赋值->定义测试用例(调用实例函数)

第三步：创建po,script包,reports目录->po中有调浏览器，登录文件，第一级业务分层包
	第一级业务分层包->第二级业务分层包，链接文件
	第二级业务分层包->业务流程
	创建类将函数包起来，将函数剥离出来(链接，登录，打开浏览器)
	在script包中创建case文件->用类包装起来#导入unittest和流程中的类
	case包中的类：TestClass(unittest.TestCase)->setUp,tearDown,测试业务(增删改查)，测试用例
	setUp(实例化)->实例化driver:如self.obj=Page()
	      	       启动浏览器->self.driver=self.obj.create_driver()#类方法
		       实例化登录（文件中的类）
		       实例化流程...（文件中的类）
	tearDown->实浏览器例化关闭：self.obj.close_url(self.driver)#注意self.driver	
	
	测试业务(增删改查)->整个流程(self.实例化.函数(self.driver)),验证需要将其返回

	测试用例：




第四步：
第五步:
创建共享业务，工具类  self，去掉driver（全部去继承可以解决）将driver放入init中
第6步
创建libs
base_work
tool
修改case中的代码

找到实例化的源头，返回driver，并在打开浏览器中构造函数init里面添加判断
****为什么会打开多个浏览器：
	实例化时，由于实例对象不同，每次都会启动浏览器，故会启动多个浏览器
****如何解决启动多个浏览器
	1.在登录时会首先实例化，需要在公共登录中将第一个driver返回 return 实例化名.driver
	  在登录时必须加全局等待

	2.后面流程需要实例化时将返回的driver传给它
	3.判断是否已经有浏览器启动(每次执行时都会调动init)
	在init里面添加判断语句
  	# 生成浏览器驱动
    	def __init__(self,driver=''):

        	# 判断是否有浏览器启动
       	 	b=driver
       		 if b=='':
            		self.driver=create_browser_deiver()
        	 else:
            		self.driver=b

	
前端代码修改，只需修改对象层不需去修改操作层和业务层

UI自动化测试做完会有许多的数据需要删除，保持测试环境的干净(工具的数据库)

传统型数据库：MySQL，orcle...

非关系型数据库：nosql  redis mongodb

redis+MySQL

将经常被查的数据放入到redis一段时间后，在导入MySQL中  要验证的两次

查数据库：验证和查验证码是否发送到手机

装第三方库(发送邮件)：在pycharm>file>settings>project:项目名如Sept5 >project interpreter>加号搜索yagmail>install package(安装)》检查（project interpreter）
在cmd中安装》pip list






